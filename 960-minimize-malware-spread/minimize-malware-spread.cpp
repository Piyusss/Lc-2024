
class DisjointSet {
    vector<int> rank, parent, sizee;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        sizee.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            sizee[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (sizee[ulp_u] < sizee[ulp_v]) {
            parent[ulp_u] = ulp_v;
            sizee[ulp_v] += sizee[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            sizee[ulp_u] += sizee[ulp_v];
        }
    }

    int sizeOfComponent(int ult_p){
        return sizee[ult_p];
    }

};


class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        int m=graph[0].size();

        DisjointSet ds(n);
        sort(initial.begin(),initial.end());

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i!=j && graph[i][j]==1){
                    ds.unionBySize(i,j);
                }
            }
        }

        
        unordered_map<int,int>mp;
        for(auto it:initial){
            int ulp=ds.findUPar(it);
            mp[ulp]++;
        }

        int ans=initial[0];
        int maxi=0;
        for(int i=0;i<initial.size();i++){
            int num=initial[i];
            int ulp=ds.findUPar(num);
            if(mp[ulp]==1){
                int s=ds.sizeOfComponent(ulp);
                if(s>maxi){
                    ans=num;
                    maxi=s;
                }
            }
        }

        return ans;
    }
};